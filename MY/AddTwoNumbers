/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry_bit=0;
        int val=0;
        ListNode *result=new ListNode(0);
        ListNode *remember=result;
        ListNode *former=result;
        while(l1!=NULL&&l2!=NULL){
            former=result;
            val=carry_bit+l1->val+l2->val;
            carry_bit=0;
            if(val>=10){
                carry_bit=val/10;
                val=val-carry_bit*10;
            }
            result->val=val;
            result->next=new ListNode(carry_bit);
            l1=l1->next;
            l2=l2->next;
            result=result->next;
        }
        if(l2!=NULL)//you know the two lists may not match
            while(l2!=NULL){
                former=result;
                val=carry_bit+l2->val;
                carry_bit=0;
                if(val>=10){
                    carry_bit=val/10;
                    val=val-carry_bit*10;
                }
                result->val=val;
                result->next=new ListNode(carry_bit);
                l2=l2->next;
                result=result->next;  
            }
        else if(l1!=NULL)
            while(l1!=NULL){
                former=result;
                val=carry_bit+l1->val;
                carry_bit=0;
                if(val>=10){
                    carry_bit=val/10;
                    val=val-carry_bit*10;
                }
                result->val=val;
                result->next=new ListNode(carry_bit);
                l1=l1->next;
                result=result->next;  
            }
        if(former->next->val==0)
            former->next=NULL;
        return remember;
    }
};




//------------------------------the second way I was inspired by the answer
//whatâ€˜s more I have attach the test code
#include<iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};



ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
	int carry_bit = 0;
	int val = 0;
	ListNode *result = new ListNode(0);
	ListNode *remember = result;
	ListNode *former = result;
	int val1 = 0;
	int val2 = 0;
	while (l1 != NULL || l2 != NULL) {
		val1 = 0;
		val2 = 0;
		if (l1 != NULL) { val1 = l1->val;l1 = l1->next; }
		if (l2 != NULL) { val2 = l2->val;l2 = l2->next; }
		former = result;
		val = carry_bit + val1 + val2;
		carry_bit = 0;
		if (val >= 10) {
			carry_bit = val / 10;
			val = val - carry_bit * 10;
		}
		result->val = val;
		result->next = new ListNode(carry_bit);
		result = result->next;
	}

	if (former->next->val == 0)
		former->next = NULL;
	return remember;
}


int main() {
	ListNode* l1 = new ListNode(2);
	ListNode* l2 = new ListNode(4);
	ListNode* l3 = new ListNode(3);
	ListNode* l4 = new ListNode(5);
	ListNode* l5 = new ListNode(6);
	ListNode* l6 = new ListNode(4);
	l1->next = l2;
	l2->next = l3;
	l4->next = l5;
	l5->next = l6;
	ListNode* result = addTwoNumbers(l1, l4);
	cout << result->val<<endl;
	cout << result->next->val << endl;
	cout << result->next->next->val << endl;
	system("pause");
	return 0;

}



//-------------the answer
ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
ListNode dummy(-1); 
int carry = 0;
ListNode *prev = &dummy;
for (ListNode *pa = l1, *pb = l2;
pa != nullptr || pb != nullptr;
pa = pa == nullptr ? nullptr : pa->next,
pb = pb == nullptr ? nullptr : pb->next,
prev = prev->next) {
const int ai = pa == nullptr ? 0 : pa->val;
const int bi = pb == nullptr ? 0 : pb->val;
const int value = (ai + bi + carry) % 10;
carry = (ai + bi + carry) / 10;
prev->next = new ListNode(value); 
}
if (carry > 0)
prev->next = new ListNode(carry);
return dummy.next;
}
